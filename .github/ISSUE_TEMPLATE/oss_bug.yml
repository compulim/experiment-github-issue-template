name: Bug report (open source)
description: Create a report to help us improve our product.
labels:
  - bug
body:
  - type: dropdown
    attributes:
      label: Version
      description: Please verify your bug on latest version before submitting an issue.
      options:
        - Latest production (@latest)
        - Latest development (@main)
        - Not latest
    validations:
      required: true
  - type: dropdown
    attributes:
      label: Module resolution
      multiple: true
      options:
        - |
          ESM (default):
          import { useMemoMap } from "use-memo-map"
        - 'ESM: import useMemoMap from "use-memo-map/useMemoMap"'
        - 'CommonJS: require("use-memo-map")'
        - 'CommonJS: require("use-memo-map/useMemoMap")'
        - Others or unrelated
    validations:
      required: true
  - type: dropdown
    attributes:
      label: Environment
      description: We support [Browserslist "defaults"](https://github.com/browserslist/browserslist#full-list) and Internet Explorer mode. Support of other environments are limited.
      multiple: true
      options:
        - Modern browsers (browserlist "defaults")
        - Internet Explorer mode
        - Server-side rendering
        - Others or unrelated
  - type: textarea
    attributes:
      label: Test case
      description: |
        Please write a test case which fail the scenario and put comments in [BDD format (given/when/then)](https://www.thoughtworks.com/insights/blog/applying-bdd-acceptance-criteria-user-stories).

        *Our support will be slow if a test case is not provided.*

        Once the issue is resolved, your test case will become part of [our test suite](../../tree/main/packages/integration-test/) to protect from regressions.

        For your convenience, a simple test case is provided below. For advanced scenarios, please look at [our test suite](../../tree/main/packages/integration-test/).
      render: js
      value: |
        import { renderHook } from '@testing-library/react-hooks';
        import { useMemoMap } from 'use-memo-map';

        test('simple scenario', () => {
          // GIVEN: A "multiply by 10" mapper.
          const mapper = useCallback(x => x * 10, []);

          // WHEN: Calling with input of [1, 2, 3].
          const { result } = renderHook(({ input }) => useMemoMap(mapper)(input), {
            initialProps: { input: [1, 2, 3] }
          });

          // THEN: It should return [10, 20, 30].
          expect(result.current).toEqual([10, 20, 30]);
        });
  - type: textarea
    attributes:
      label: Additional context
